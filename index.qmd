---
title: "Interfaces.jl"
subtitle: "interface tests for your objects"
author:
  - name: Rafael Schouten
    orcid: 
    email: rafaelschouten@gmail.com
    affiliation: 
      - name: Globe Institute, Copenhagen University
      - department: Section for Biodiversity
  - name: Guillaume Dalle
    orcid: 0000-0003-4866-1687
    email: guillaume.dalle@epfl.ch
    affiliation: 
      - name: EPFL
      - department: IdePHICS, INDY & SPOC laboratories
date: "2024-07-11"
# bibliography: AutoDiff.bib
engine: julia
format:
  revealjs:
    incremental: true
    toc: false
    toc-depth: 1
    slide-number: true
    overview: true
    code-line-numbers: false
    theme: [night] # beige blood dark default league moon night serif simple sky solarized
    fontsize: 28pt
execute:
    echo: true
---

# Motivation

::: {.nonincremental}
- Julia has no formal interfaces
- This can lead to correctness bugs...
:::

---

<iframe src="https://yuri.is/not-julia/" style="background-color: white; width: 100%; aspect-ratio: 1.2;"></iframe>

--- 

\
\

- What can we do about correctness bugs?
- Can we implement interface testing in a package?
- There are packages trying this from different angles:
  - [Seelengrab/RequiredInterfaces.jl](https://github.com/Seelengrab/RequiredInterfaces.jl)
  - [keno/InterfaceSpecs.jl](https://github.com/keno/InterfaceSpecs.jl)
  - [mrufsvold/DuckDispatch.jl](https://github.com/mrufsvold/DuckDispatch.jl)
  - [rafaqz/Interfaces.jl](https://github.com/rafaqz/Interfaces.jl)
- Interfaces.jl is just one possible approach

## What do we mean by “interface” in Interfaces.jl?

- An interface is of a set of functions with documented contracts
- It may be tied to an abstract type, or not 
  - think `AbstractArray` vs Tables.jl
- Behaviour may be testable at _compile-time_ or _run-time_
- Interfaces may have optional components 
  - For `AbstractArray`, `setindex!` is not implemented for some StaticArrays.jl types
<!-- - [oxinabox AbstractSet issue](https://github.com/JuliaLang/julia/issues/34677){target="_blank"} -->

# Interfaces.jl approach

With a simplified `AbstractSet` example

```{julia}
#| echo: false
# Not sure why we need this
global mandatory
global optional
using BenchmarkTools
mandatory = (;
    isempty = "defines `isempty` and testdata is not empty" => !isempty,
    eltype = "elements eltype of set `s` are subtypes of `eltype(s)`" => 
      s -> typeof(first(iterate(s))) <: eltype(s),
    length = "set defines length and test object has length larger than zero" => 
      s -> length(s) isa Int && length(s) > 0,
    in = "`in` is true for all elements in the set" => 
      s -> all(x -> in(x, s), s),
);
optional = (;
    copy = "creates an identical object with the same values, that is not the same object" => 
        s -> (s1 = copy(s); s1 !== s && s1 isa typeof(s) && collect(s) == collect(s1)),
    empty = (
        "returns an empty set able to hold elements of type U" => 
            s -> (s1 = Base.empty(s); isempty(s1) && eltype(s1) == eltype(s)),
    ),
    # Components can be a tuple of tests
    intersect = (
        "`intersect` of set with itself is itself" => s -> intersect(s, s) == s,
        "`intersect` of set with an empty set is an empty set" => s -> intersect(s, empty(s)) == empty(s),
    ),
    # ...
);
components = (; mandatory, optional);
```

## Define the interface 
\
\
Using the `@interface` macro:

```{julia}
using Interfaces
 
@interface SetInterface AbstractSet components "Defines AbstractSet behavior"
#          ^            ^           ^          ^
#          name         supertype   tests      description
```

## Define mandatory components:

\
`component = "label" => function`
\
\
```{julia}
mandatory = (;
    isempty = "defines `isempty` and testdata is not empty" => !isempty,
    eltype = "elements eltype of set `s` are subtypes of `eltype(s)`" => 
      s -> typeof(first(iterate(s))) <: eltype(s),
    length = "set defines length and test object has length larger than zero" => 
      s -> length(s) isa Int && length(s) > 0,
    in = "`in` is true for all elements in the set" => 
      s -> all(x -> x in s, s),
);
```

---

## Define optional components:
\
```{julia}
optional = (;
    copy = "creates an identical object with the same values, that is not the same object" => 
        s -> (s1 = copy(s); s1 !== s && s1 isa typeof(s) && collect(s) == collect(s1)),
    empty = (
        "returns an empty set able to hold elements of type U" => 
            s -> (s1 = Base.empty(s); isempty(s1) && eltype(s1) == eltype(s)),
    ),
    # Components can be a tuple of tests
    intersect = (
        "`intersect` of set with itself is itself" => s -> intersect(s, s) == s,
        "`intersect` of set with an empty set is an empty set" => s -> intersect(s, empty(s)) == empty(s),
    ),
    # ...
);

components = (; mandatory, optional); 
```

## Declare an implementation
\
\
Using the `@implements` macro:

```{julia}
@implements SetInterface{(:copy,:empty)} Set  [Set((1, 2)), Set((:a, :b))]
#           ^                            ^    ^
#           interface with options       type test data
```

## Test the implementation
\
```julia
Interfaces.test(SetInterface, Set)
```

![ ](https://github.com/rafaqz/JuliaCon2024-Interfaces/blob/main/test1.png?raw=true)

## Test all the implementations
\
```julia
Interfaces.test(SetInterface)
```

![ ](https://github.com/rafaqz/JuliaCon2024-Interfaces/blob/main/test2.png?raw=true)

## Check implementation traits

Using the `implements` method:
```{julia}
Interfaces.implements(SetInterface, Set)
```
```{julia}
Interfaces.implements(SetInterface{(:copy,:empty)}, Set)
```
```{julia}
Interfaces.implements(SetInterface{:intersect}, Set)
```

This has no runtime cost:
```{julia}
@btime Interfaces.implements(SetInterface{(:copy,:empty)}, Set)
```

## Check extended help

```julia
help?> ?SetInterface
search: SetInterface

      SetInterface

  An Interfaces.jl Interface with mandatory components (:isempty, :eltype, :length, :in) and
  optional components (:copy, :empty, :intersect).

  Defines AbstractSet behavior

  Extended help
  ≡≡≡≡≡≡≡≡≡≡≡≡≡

  Mandatory keys:
  ===============

    •  isempty: defines isempty and testdata is not empty

    •  eltype: elements eltype of set s are subtypes of eltype(s)

    •  length: set defines length and test object has length larger than zero

    •  in: in is true for all elements in the set

  Optional keys:
  ==============

    •  copy: creates an identical object with the same values, that is not the same object

    •  empty:
       • returns an empty set able to hold elements of type U

    •  intersect:
       • intersect of set with itself is itself
       • intersect of set with an empty set is an empty set
```

# Status/Roadmap

- BaseInterfaces.jl subpackage is partly written (help appreciated!)
- Implementations:
  - DynamicExpressions.jl
  - DimensionalData.jl
  - JuliaGraphs ecosystem

# Case study: JuliaGraphs ecosystem

## The `AbstractGraph` interface

- A [handful of methods](https://juliagraphs.org/Graphs.jl/v1.11/ecosystem/interface/) to implement for `AbstractGraph`
- Some mandatory (`vertices`, `edges`), some optional (`add_vertex!`, `add_edge!`)
- For a given graph, are these methods correct and coherent with one another?

## An automated checker

- [GraphsInterfaceChecker.jl](https://github.com/JuliaGraphs/GraphsInterfaceChecker.jl)^[written with Oleg Fafurin] relies on Interfaces.jl to check graph implementations
- Compile-time check: `nv(g)` should be an integer
- Run-time check: `nv(g)` should be the length of `vertices(g)`
- Lighter interpretation burden on the user
- More reliable ecosystem

# Questions?
\
\
\
![](https://contrib.rocks/image?repo=rafaqz/Interfaces.jl)
\
